<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xnote.manage.modules.log.mapper.AdminLoginLogMapper">
  <resultMap id="BaseResultMap" type="com.xnote.manage.modules.log.bean.AdminLoginLog">
    <id column="log_id" jdbcType="VARCHAR" property="logId" />
    <result column="login_name" jdbcType="VARCHAR" property="loginName" />
    <result column="admin_name" jdbcType="VARCHAR" property="adminName" />
    <result column="login_ip" jdbcType="VARCHAR" property="loginIp" />
    <result column="login_type" jdbcType="INTEGER" property="loginType" />
    <result column="login_status" jdbcType="INTEGER" property="loginStatus" />
    <result column="log_content" jdbcType="LONGVARCHAR" property="logContent" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="timestamp" jdbcType="BIGINT" property="timestamp" />
  </resultMap>
  <sql id="Base_Column_List">
    LOG_ID, LOGIN_NAME, ADMIN_NAME, LOGIN_IP, LOGIN_TYPE, LOGIN_STATUS,LOG_CONTENT, CREATE_TIME, TIMESTAMP
  </sql>

  <select id="getCount" resultType="java.lang.Integer">
    SELECT COUNT(LOG_ID)
    FROM XNOTE_LOG_LOGIN_ADMIN
  </select>

  <select id="getLogs" resultType="com.xnote.manage.modules.log.bean.AdminLoginLog">
    SELECT
    <include refid="Base_Column_List" />
    FROM XNOTE_LOG_LOGIN_ADMIN
    ORDER BY TIMESTAMP DESC
    LIMIT #{code}, #{size}
  </select>
  <!-- 记录日志 -->
  <insert id="insertLog">
    INSERT INTO XNOTE_LOG_LOGIN_ADMIN (
      LOG_ID, LOGIN_NAME, ADMIN_NAME,
      LOGIN_IP, LOGIN_TYPE, LOGIN_STATUS,
      LOG_CONTENT, CREATE_TIME, TIMESTAMP
      )
    values (
      #{logId,jdbcType=VARCHAR}, #{loginName,jdbcType=VARCHAR}, #{adminName,jdbcType=VARCHAR},
      #{loginIp,jdbcType=VARCHAR}, #{loginType,jdbcType=INTEGER}, #{loginStatus,jdbcType=INTEGER},
      #{logContent,jdbcType=LONGVARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{timestamp,jdbcType=BIGINT}
      )
  </insert>















  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from xnote_log_login_admin
    where log_id = #{logId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from xnote_log_login_admin
    where log_id = #{logId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.xnote.manage.modules.log.bean.AdminLoginLog">

  </insert>
  <insert id="insertSelective" parameterType="com.xnote.manage.modules.log.bean.AdminLoginLog">
    insert into xnote_log_login_admin
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="logId != null">
        log_id,
      </if>
      <if test="loginName != null">
        login_name,
      </if>
      <if test="adminName != null">
        admin_name,
      </if>
      <if test="loginIp != null">
        login_ip,
      </if>
      <if test="loginType != null">
        login_type,
      </if>
      <if test="loginStatus != null">
        login_status,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="timestamp != null">
        timestamp,
      </if>
      <if test="logContent != null">
        log_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="logId != null">
        #{logId,jdbcType=VARCHAR},
      </if>
      <if test="loginName != null">
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="adminName != null">
        #{adminName,jdbcType=VARCHAR},
      </if>
      <if test="loginIp != null">
        #{loginIp,jdbcType=VARCHAR},
      </if>
      <if test="loginType != null">
        #{loginType,jdbcType=INTEGER},
      </if>
      <if test="loginStatus != null">
        #{loginStatus,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="timestamp != null">
        #{timestamp,jdbcType=BIGINT},
      </if>
      <if test="logContent != null">
        #{logContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xnote.manage.modules.log.bean.AdminLoginLog">
    update xnote_log_login_admin
    <set>
      <if test="loginName != null">
        login_name = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="adminName != null">
        admin_name = #{adminName,jdbcType=VARCHAR},
      </if>
      <if test="loginIp != null">
        login_ip = #{loginIp,jdbcType=VARCHAR},
      </if>
      <if test="loginType != null">
        login_type = #{loginType,jdbcType=INTEGER},
      </if>
      <if test="loginStatus != null">
        login_status = #{loginStatus,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="timestamp != null">
        timestamp = #{timestamp,jdbcType=BIGINT},
      </if>
      <if test="logContent != null">
        log_content = #{logContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where log_id = #{logId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xnote.manage.modules.log.bean.AdminLoginLog">
    update xnote_log_login_admin
    set login_name = #{loginName,jdbcType=VARCHAR},
      admin_name = #{adminName,jdbcType=VARCHAR},
      login_ip = #{loginIp,jdbcType=VARCHAR},
      login_type = #{loginType,jdbcType=INTEGER},
      login_status = #{loginStatus,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      timestamp = #{timestamp,jdbcType=BIGINT},
      log_content = #{logContent,jdbcType=LONGVARCHAR}
    where log_id = #{logId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xnote.manage.modules.log.bean.AdminLoginLog">
    update xnote_log_login_admin
    set login_name = #{loginName,jdbcType=VARCHAR},
      admin_name = #{adminName,jdbcType=VARCHAR},
      login_ip = #{loginIp,jdbcType=VARCHAR},
      login_type = #{loginType,jdbcType=INTEGER},
      login_status = #{loginStatus,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      timestamp = #{timestamp,jdbcType=BIGINT}
    where log_id = #{logId,jdbcType=VARCHAR}
  </update>
</mapper>